import json
from aiogram import types
import random
import re

# Load questions and correct answers from JSON file
with open('data/questions.json', 'r', encoding='utf-8') as f:
    data = json.load(f)
    questions = data['questions']
    correct_answers = data['correct_answers']
    anagrams = data['anagrams']

# –ê–∫—Ç–∏–≤–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_questions = {}
active_anagrams = {}

# –ó–∞–ø—É—Å–∫ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã –ø–æ —ç—Ç–∏–º–æ–ª–æ–≥–∏–∏
async def play_etymology_quiz(message: types.Message):
    word, options = random.choice(list(questions.items()))
    active_questions[message.chat.id] = word  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –≤–æ–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await message.answer(
        f"–ò–∑ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø—ã —è–∑—ã–∫–æ–≤ –ø—Ä–æ–∏–∑–æ—à–ª–æ —Å–ª–æ–≤–æ '{word}'?\n"
        "üîπ –ù–∞–ø–∏—à–∏ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: " + ", ".join(options)
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–∏–º–æ–ª–æ–≥–∏—á–µ—Å–∫—É—é –≤–∏–∫—Ç–æ—Ä–∏–Ω—É
async def check_etymology_answer(message: types.Message):
    user_answer = message.text.strip().lower()
    chat_id = message.chat.id

    if chat_id not in active_questions:
        return  # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å–∞ –Ω–µ—Ç, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º

    word = active_questions[chat_id]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
    correct_answer = correct_answers[word].lower()
    
    if user_answer == correct_answer:
        await message.answer("‚úÖ –í–µ—Ä–Ω–æ! –¢—ã –º–æ–ª–æ–¥–µ—Ü!")
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer.capitalize()}.")


    del active_questions[chat_id]  # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    


# 3Ô∏è‚É£ –≠—Ç–∏–º–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –∞–Ω–∞–≥—Ä–∞–º–º—ã
async def play_etymology_anagram(message: types.Message):
    anagram, word = random.choice(list(anagrams.items()))
    active_anagrams[message.chat.id] = word  # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º –∞–Ω–∞–≥—Ä–∞–º–º—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await message.answer(
        f"–†–∞–∑–≥–∞–¥–∞–π –∞–Ω–∞–≥—Ä–∞–º–º—É: '{anagram.upper()}'\n"
        "üîπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –æ—Ç–≤–µ—Ç –≤ –≤–∏–¥–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ!",
        reply_markup=types.ForceReply(selective=True)
    )

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∞–Ω–∞–≥—Ä–∞–º–º—É
async def check_anagram_answer(message: types.Message):
    user_answer = message.text.strip().lower()
    chat_id = message.chat.id

    if chat_id not in active_anagrams:
        return  # –ï—Å–ª–∏ –∞–Ω–∞–≥—Ä–∞–º–º—ã –Ω–µ—Ç, –Ω–µ –æ—Ç–≤–µ—á–∞–µ–º

    word = active_anagrams[chat_id]  # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ —Å–ª–æ–≤–æ
    correct_answer = correct_answers[word].lower()

    if user_answer == word:
        await message.answer(f"‚úÖ –í–µ—Ä–Ω–æ! –≠—Ç–æ —Å–ª–æ–≤–æ {correct_answer} –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è üé≠")
    else:
        await message.answer(f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

    del active_anagrams[chat_id]  # –£–¥–∞–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –∞–Ω–∞–≥—Ä–∞–º–º—É